version: '3.7'

services:
  zookeeper:
    image: 'bitnami/zookeeper:3.8'
    container_name: zookeeper_docker
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - my-network

  kafka:
    image: 'bitnami/kafka:3.3'
    container_name: kafka_docker
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper_docker:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka_docker:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper
    networks:
      - my-network

  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mnrao
    ports:
      - '3306:3306'
    networks:
      - my-network
    healthcheck:
      test: "exit 0"

  springboot-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/mnrao
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka_docker:9092
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my-network
    healthcheck:
      test: "exit 0"

  websocket-service:
    image: nodeimage:latest
    ports:
      - '8082:8082'
    networks:
      - my-network
    depends_on:
      springboot-app:
        condition: service_healthy

networks:
  my-network:
    driver: bridge